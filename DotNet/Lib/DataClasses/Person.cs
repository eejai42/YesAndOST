/*************************************************
Initially Generated by SSoT.me - 2017
    EJ Alexandra - An odxml42 Tool
    This file will not be overwritten by default!
*************************************************/
using CoreLibrary.Extensions;
using Newtonsoft.Json;
using SassyMQ.YA.Lib;
using System;
using System.ComponentModel;
using System.Linq;
using YesAndOST.Lib.SqlDataManagement;

namespace YesAndOST.Lib.DataClasses
{

    public partial class Person
    {
        public Person()
        {
            this.InitPoco();
        }

        public Avatar Avatar { get; set; }

        public override String ToString()
        {
            return String.Format("Person: {0}", this.Name);
        }

        public static Person GetPerson(SqlDataManager sdm, Person person)
        {
            if (String.IsNullOrEmpty(person.EmailAddress)) throw new ArgumentException("Invalid Person request - Email Address is required to find a person");
            else if (person.EmailAddress.IndexOf("@") <= 1) throw new ArgumentException("Invalid person request - Email address is invalid.");

            // Lookup the person by their email address
            var personWhere = string.Format("EmailAddress LIKE '{0}'", person.EmailAddress.ToSqlSafeString());

            var dbPerson = sdm.GetAllPersons<Person>(personWhere).FirstOrDefault();

            if (ReferenceEquals(dbPerson, null))
            {
                dbPerson = new Person();
                dbPerson.Name = person.EmailAddress;
                dbPerson.EmailAddress = person.EmailAddress;
                dbPerson.PreferredHandle = person.EmailAddress.Substring(0, person.EmailAddress.IndexOf("@"));
                dbPerson.IsEmailVerified = false;
                dbPerson.IsPhoneerified = false;
                dbPerson.PhoneNumber = String.Empty;
                dbPerson.SSN = String.Empty;

                dbPerson.Avatar = dbPerson.GetOrAvatar(sdm);

                sdm.Insert(dbPerson);
            }
            else
            {
                dbPerson.Avatar = dbPerson.GetOrAvatar(sdm);
            }

            return dbPerson;

        }

        public String ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        private Avatar GetOrAvatar(SqlDataManager sdm)
        {
            var avatarWhere = String.Format("AvatarId = '{0}'", this.PersonId);
            var avatar = sdm.GetAllAvatars<Avatar>(avatarWhere).FirstOrDefault();
            if (ReferenceEquals(avatar, null))
            {
                avatar = new Avatar();
                avatar.AvatarId = this.PersonId;
                avatar.Nickname = avatar.Handle = this.PreferredHandle;
                sdm.Insert(avatar);
            }

            return avatar;
        }
    }
}